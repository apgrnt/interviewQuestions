package glebe.andrew.thirteen.server;

import java.util.Arrays;

public class Game {
    
    public boolean checkRun(Cards[] play)
    {
        boolean validPlay = true;
        Arrays.sort(play);
        for(int i = 0; i < play.length - 1;)
        {
            if(play[i+1].getRank() - play[i].getRank() == 1)
                i++;
            else
            {
                validPlay = false;
                break;
            }
        }
        return validPlay;
    }
        
    public boolean checkSuitedRun(Cards[] play)
    {
        Arrays.sort(play);
        boolean validPlay = true;
        boolean suitCheck = true;
        for(int i = 0; i < play.length - 1;)
        {
            if(play[i+1].getSuit() == play[i].getSuit())
                i++;
            else
            {
                suitCheck = false;
                break;
            }
        }
        if(!suitCheck || !checkRun(play))
            validPlay = false;
        return validPlay;      
    }
    
    public boolean checkQuads(Cards[] play)
    {
        boolean validPlay = checkRank(play);
        return validPlay;        
    }
    
    public boolean checkTriple(Cards[] play)
    {
        boolean validPlay = checkRank(play);
        return validPlay;
    }
    
    public boolean checkPair(Cards[] play)
    {
        boolean validPlay = checkRank(play);
        return validPlay;
    }
    
//    public boolean playSingle(Cards[] play)
//    {
//        
//    }
    
    //try/catch if i don't sanitize input, outofboundexception
    
    public boolean checkPairRun(Cards[] play)
    {
        boolean validPlay = true;
        boolean pairs = true;
        boolean run = true;
        Arrays.sort(play);
        for(int i = 0; i < play.length;)
        {
            if(play[i].getRank() == play[i+1].getRank())
                i += 2;
            else
            {
                pairs = false;
                break;
            }
        }
        for(int i = 0; i < play.length - 2;)
        {
            if(play[i+2].getRank() - play[i].getRank() == 1)
                i +=2;
            else
            {
                run = false;
                break;
            }
        }
        if(!pairs || !run)
            validPlay = false;
        return validPlay;
    }
    
    public void lead(Cards[] play)
    {
    	if (play.length == 1)
    		playSingle(play);
    	else if(checkPair(play))
    		playPair(play);
    	else if(checkTriple(play))
    		playTriple(play);
    	else if(checkQuads(play))
    		playQuads(play);
    	else if(checkSuitedRun(play))
    		playSuitedRun(play);
    	else if(checkRun(play))
    		playRun(play);
    	else if(checkPairRun(play))
    		playPairRun(play);
    }
    
    public void follow(Cards[] play)
    {
    	if (play.length == 1 ){
    	    
    	}
    }
    
    public boolean checkRank(Cards[] play)
    {
        boolean equalRanks = true;
        for(int i = 0; i < play.length - 1;)
        {
            if(play[i+1].getRank() == play[i].getRank())
                i++;
            else
            {
                equalRanks = false;
                break;
            }
        }
        return equalRanks;
    }
    
    class Player implements Runnable {
	
	public void run() {
	    
	}
	
    }
    
   
}
