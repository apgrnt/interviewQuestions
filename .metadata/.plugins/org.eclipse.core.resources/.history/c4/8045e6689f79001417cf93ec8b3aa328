package edu.uweo.java2.homework.threads;

public class TaskThreader {
    int numThreads_;
    Thread[] threads;
    Thread waiting = new Thread(new Waiter());

    public TaskThreader(int numThreads) {
	numThreads_ = numThreads;
	threads = new Thread[numThreads];
	for (int i = 0; i < numThreads; i++) {
	    threads[i] = new Thread(new ToRun());
	    System.out.println("New Thread Created");
	}
	
    }

    public void process() {
	waiting.start();
	for (Thread t : threads) {
	    t.start();
	    System.out.println("Thread Started");
	    
	}
    }

    private class ToRun implements Runnable {
	public synchronized void run() {
	    while (!Thread.currentThread().isInterrupted()) {
		Task t = TaskGenerator.nextTask();
		System.out.println("Task Gotten for " + Thread.currentThread().getName());
		if (!Thread.currentThread().isInterrupted()) {
		    try {
			System.out.println("Executing " + Thread.currentThread().getName());
			t.execute();

		    } catch (IllegalTaskStateException e) {
			e.printStackTrace();
		    }
		}
		
	    }
	}
    }
    private class Waiter implements Runnable {
	public void run() {
	    TaskGenerator.waitForShutdown();
	    for (Thread t : threads) {
		t.interrupt();
	    }
	    System.out.println("SHUT DOWN CALLED");
	}
    }
}
