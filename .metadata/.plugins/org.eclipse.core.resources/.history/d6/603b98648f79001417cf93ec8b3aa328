package edu.uweo.java2.homework.threads;

public class TaskThreader {
    int numThreads_;
    Thread[] threads;

    public TaskThreader(int numThreads) {
	numThreads_ = numThreads;
	threads = new Thread[numThreads];
	for (int i = 0; i < numThreads; i++) {
	    threads[i] = new Thread(new ToRun());
	    System.out.println("New Thread Created");
	}
    }

    public void process() {
	for (Thread t : threads) {
	    t.start();
	    System.out.println("Thread Started");

	}
    }

    private class ToRun implements Runnable {
	public void run() {
	    while(!Thread.currentThread().isInterrupted()) {
		Task t = TaskGenerator.nextTask();
		System.out.println("Task Gotten");
		try {
		    System.out.println("Executing");
		    t.execute();
		    
		} catch (IllegalTaskStateException e) {
		    // TODO Auto-generated catch block
		    e.printStackTrace();
		}
		System.out.println("Called before waitForShutown()");
		TaskGenerator.waitForShutdown();
		System.out.println("Called After waitForShutdown()");
	    }
	}
    }
}
